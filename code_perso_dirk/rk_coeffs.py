# -*- coding: utf-8 -*-
"""
Created on Fri Mar  8 18:43:48 2019

@author: Laurent
"""
import numpy as np

class ode_result:
    def __init__(self, y, t, nfev):
        self.y = y
        self.t = t
        self.nfev = nfev


def getButcher(name):
  """ Donne le tableau de Butcher (A,b,c) de la méthode RK choisie
  Source: https://en.wikipedia.org/wiki/List_of_Runge–Kutta_methods
  """
  name = name.upper()
  if name=='IE' or name=='IE2': # Implicit Euler, L-stable stiffly accurate
    A= np.array([[1]])
    c= np.array([1])
    b= np.array([1])
  elif name=='EE': # Explicit Euler
    A= np.array([[0]])
    c= np.array([0])
    b= np.array([1])
#  elif name=='CRKN': # Crank-Nicolson
#    A= np.array([[0, 0],
#                 [0, 1]])
#    c= np.array([0, 1])
#    b= np.array([1/2, 1/2])
  elif name=='L-SDIRK-22-QZ': #Qin and Zhang
    # n'est pas stiffly accurate, mais est L-stable
    x = 1+np.sqrt(2)/2
#    x = 1-np.sqrt(2)/2
    A= np.array([[x, 0],
                 [1-x, x]])
    c= np.array([x, 1])
    b= np.array([1/2, 1/2])
  elif name=='RK4':
    A= np.array([[0,0,0,0],
                 [1/2, 0, 0, 0],
                 [0, 1/2, 0, 0],
                 [0, 0, 1, 0]
                 ])
    c= np.array([0, 1/2, 1/2, 1])
    b= np.array([1/6, 1/3, 1/3, 1/6])

  elif name=='L-SDIRK-43': # L-Stable, stiffly accurate, 4 stages, 3 order, SDIRK method
    A = np.array([[1/2,   0,  0,   0],
                  [1/6,  1/2, 0,   0],
                  [-1/2, 1/2, 1/2, 0],
                  [3/2, -3/2, 1/2, 1/2],
                ])
    c = np.array([1/2, 2/3, 1/2, 1])
    b = A[-1,:]
  elif name=='L-SDIRK-33': # L-Stable, stiffly accurate, 3 stages, 3 order, SDIRK method
    x = 0.4358665215
    A= np.array([ [x,                                  0,              0],
                  [(1-x)/2,                           x,                0],
                  [-3*(x**2)/2 + 4*x -1/4,     3*(x**2)/2-5*x+5/4,      x],
                ])
    c= np.array([x, (1+x)/2, 1])
    b= A[-1,:]
  elif name== 'ESDIRK32-3': # stiffly accurate
    # méthode d'ordre 3 extraite de la méthode embedded ESDIRK 32 avec 4 stages
    # taken from A FAMILY OF ESDIRK INTEGRATION METHODS
    # JOHN BAGTERP JØRGENSEN ∗, MORTEN RODE KRISTENSEN , AND
    # PER GROVE THOMSEN
    gamma = 0.4358665215
    A= np.array([ [0, 0, 0, 0],
                  [gamma, gamma, 0, 0],
                  [(-4*gamma**2 + 6*gamma-1)/(4*gamma), (-2*gamma+1)/(4*gamma), gamma, 0.],
                  [(6*gamma-1)/(12*gamma), -1/(12*gamma*(2*gamma-1)), (-6*gamma**2 + 6*gamma -1)/(3*(2*gamma-1)), gamma],
                ])
    c= np.array([0, 2*gamma, 1, 1])
    b= A[-1,:]

  elif name== 'ESDIRK32-2': # stiffly accurate
    # méthode d'ordre 2 extraite de la méthode embedded ESDIRK 32 avec 4 stages
    # taken from A FAMILY OF ESDIRK INTEGRATION METHODS
    # JOHN BAGTERP JØRGENSEN ∗, MORTEN RODE KRISTENSEN , AND
    # PER GROVE THOMSEN
    gamma = 0.4358665215
    A= np.array([ [0, 0, 0],
                  [gamma, gamma, 0],
                  [(-4*gamma**2 + 6*gamma-1)/(4*gamma), (-2*gamma+1)/(4*gamma), gamma],
                ])
    c= np.array([0, 2*gamma, 1])
    b= A[-1,:]
  elif name=='ESDIRK5(4I)8L[2]SA':
    # ESdirk method, stiffly accurate, Diagonally Implicit Runge-Kutta Methods for Ordinary Differential Equations. A Review       by Christopher A. Kennedy
    # error control possible
      A = np.zeros((8,8))
      b = np.zeros(8)
      c = np.zeros(8)
      A[1,:2] = [1/4, 1/4]
      A[2,:3] = [1748874742213/5795261096931, 1748874742213/5795261096931, 1/4]
      A[3,:4] = [2426486750897/12677310711630, 2426486750897/12677310711630, -783385356511/7619901499812, 1/4]

      A[4,:5] = np.array([1616209367427, 1616209367427, -211896077633, 464248917192, 1])/ \
                np.array([5722977998639,  5722977998639, 5134769641545, 17550087120101, 4])

      A[5,:6] = np.array([1860464898611, 1825204367749, -1289376786583, 55566826943, 1548994872005,  1])/ \
                np.array([7805430689312, 7149715425471, 6598860380111,  2961051076052,  13709222415197,  4])

      A[6,:7] = np.array([1783640092711, -5781183663275, 57847255876685, 29339178902168, 122011506936853, -60418758964762, 1])/ \
                np.array([14417713428467, 18946039887294, 10564937217081, 9787613280015, 12523522131766, 9539790648093, 4])

      A[7,:8] = np.array([3148564786223, -4152366519273, -143958253112335, 16929685656751, 37330861322165, -103974720808012, -93596557767, 1])/ \
                np.array([23549948766475,  20368318839251,  33767350176582, 6821330976083, 4907624269821, 20856851060343,  4675692258479, 4])

      b[:] = A[-1,:]
      c = np.array([0, 1/2, (2+np.sqrt(2))/4, 53/100, 4/5, 17/25, 1, 1])
  else:
    raise Exception('unknown integrator {}'.format(name))

  return {'A':A, 'b':b, 'c':c}

def heunEuler(fcn, yini, tspan, tolerance, dt_max):
    """ Heun Euler adaptative method"""
    # compute stages
    neq = np.size(yini)
    tn=tspan[0]
    dt=dt_max

    c = np.array([0,1])
    a = np.array([[0, 0],
                  [1, 0]])
    b = np.array([0.5, 0.5])
    bhat = np.array([1, 0]) #embedded method

    phat = 1 #embedded order
    #p = 2 #order

    s = np.size(b)
    ki = np.zeros((neq,s))

    y = [yini]
    T = [tspan[0]]
    nfev=0
    dt = min(dt_max, tspan[1]-tspan[0])
    while tn<tspan[1]:
       # print('{}'.format(tn))
        yn = y[-1]
        error_norm =2*tolerance
        while error_norm>tolerance:
            for i in range(s):
                temp = np.zeros(neq)
                for j in range(i):
                    temp = temp + a[i,j]*ki[:,j]
                ki[:,i] = fcn(tn+c[i]*dt, yn+dt*temp)
                nfev = nfev+1

            embedded_ynp1 = np.copy(yn)
            ynp1 = np.copy(yn)
            for j in range(s):
                embedded_ynp1 = embedded_ynp1 + dt*bhat[j]*ki[:,j]
                ynp1 = yn + 2*dt*b[j]*ki[:,j] #WHY DO I NEED 2* ???????

            error = embedded_ynp1-ynp1
            error_norm = np.dot(error, error)
            dtopt = 0.9*dt*(tolerance/error_norm)**(1/(phat+1))
            if 0: #no stepsize control
                yn = ynp1
                tn = tn + dt
                y.append(ynp1)
                T.append(tn)
                error_norm = 0.
            else:
                if error_norm>tolerance:
                    dt = min(1e-10, dtopt)
                else:
                    yn = ynp1
                    tn = tn + dt
                    y.append(ynp1)
                    T.append(tn)
                    error_norm = 0.
                    # new dt
                    dt = min(dtopt, tspan[1]-tn)
                if np.isnan(dt) or np.isnan(tn):
                    print('oups')
                print('\n\t t={}'.format(tn))
                print('\n\tdt={:.3e}, dtopt={:.3e}'.format(dt, dtopt))

    return ode_result(np.array(np.transpose(np.array(y)), order='F'),
                      np.array(T),
                      nfev)

def computeJacobian(modelfun,x, options, bUseComplexStep):
    """
    Method to numerically compute the Jacobian of the function modelfun with
    respect to all the components of the input vector x.

    INPUTS:
        - modelfun:
            a function of the type y=modelfun(x)
        - x: (numpy 1D-array)
            the vector around which the Jacobian must be computed
        - Options is a dictionnary including 2 fields:
            - bUseComplexStep: (boolean)
                if True, a complex pertubation is used, allowing for machine-precision-level
                accuracy in the determinaiton fo the Jacobian
                if False, finite differences are used with adaptive pertubation size
            - bVectorisedModelFun: (boolean)
                True if the modelfun can accept a vectorised input such as a matrix
                [x, x1, x2, x3] instead of just the vector x. This way, the modelfun can
                be called less often and more efficiently

    OUTPUT:
        - Jac, the Jacobian of the function
    """
    n_x = np.size(x)
    hcpx = 1e-50
    # multiple perturbed calls
    if bUseComplexStep:
        res = modelfun(x)
        Dres = np.zeros( (np.size(res,0), np.size(x,0)))
        for ip in range(n_x):
            perturbation = np.zeros(np.size(x), dtype='cfloat')
            perturbation[ip] = hcpx*1j
            perturbation = x + perturbation
            resP = modelfun(perturbation)
            Dres[:,ip] = np.imag(resP)/hcpx
        #res = real(resP)
    else:
        res = modelfun(x)
        Dres = np.zeros( (np.size(res,0), np.size(x,0)) )
        current_h = np.zeros((n_x,1))
        for ip in range(n_x):
            current_h[ip] = np.max([1e-1*abs(x[ip]), 1e-1]) # perturbation's size

            perturbation = np.zeros(np.size(x))
            perturbation[ip] = current_h[ip]

            perturbation = x + perturbation
            resP = modelfun(perturbation)
            Dres[:,ip] = (resP-res)/current_h[ip]
    return Dres

def RK10coeffs():
    #https://sce.uhcl.edu/rungekutta/rk108.txt
    c = np.array([
      0.000000000000000000000000000000000000000000000000000000000000,
      0.100000000000000000000000000000000000000000000000000000000000,
      0.539357840802981787532485197881302436857273449701009015505500,
      0.809036761204472681298727796821953655285910174551513523258250,
      0.309036761204472681298727796821953655285910174551513523258250,
      0.981074190219795268254879548310562080489056746118724882027805,
      0.833333333333333333333333333333333333333333333333333333333333,
      0.354017365856802376329264185948796742115824053807373968324184,
      0.882527661964732346425501486979669075182867844268052119663791,
      0.642615758240322548157075497020439535959501736363212695909875,
    0.357384241759677451842924502979560464040498263636787304090125,
    0.117472338035267653574498513020330924817132155731947880336209,
       0.833333333333333333333333333333333333333333333333333333333333,
       0.309036761204472681298727796821953655285910174551513523258250,
    0.539357840802981787532485197881302436857273449701009015505500,
       0.100000000000000000000000000000000000000000000000000000000000,
     1.00000000000000000000000000000000000000000000000000000000000,
     ])
    b = np.array([
      0.0333333333333333333333333333333333333333333333333333333333333,
      0.0250000000000000000000000000000000000000000000000000000000000,
      0.0333333333333333333333333333333333333333333333333333333333333,
      0.000000000000000000000000000000000000000000000000000000000000,
      0.0500000000000000000000000000000000000000000000000000000000000,
      0.000000000000000000000000000000000000000000000000000000000000,
      0.0400000000000000000000000000000000000000000000000000000000000,
      0.000000000000000000000000000000000000000000000000000000000000,
      0.189237478148923490158306404106012326238162346948625830327194,
      0.277429188517743176508360262560654340428504319718040836339472,
     0.277429188517743176508360262560654340428504319718040836339472,
     0.189237478148923490158306404106012326238162346948625830327194,
    -0.0400000000000000000000000000000000000000000000000000000000000,
    -0.0500000000000000000000000000000000000000000000000000000000000,
    -0.0333333333333333333333333333333333333333333333333333333333333,
    -0.0250000000000000000000000000000000000000000000000000000000000,
     0.0333333333333333333333333333333333333333333333333333333333333,
     ])


    text = """
     1    0    0.100000000000000000000000000000000000000000000000000000000000
 2    0   -0.915176561375291440520015019275342154318951387664369720564660
 2    1    1.45453440217827322805250021715664459117622483736537873607016
 3    0    0.202259190301118170324681949205488413821477543637878380814562
 3    1    0.000000000000000000000000000000000000000000000000000000000000
 3    2    0.606777570903354510974045847616465241464432630913635142443687
 4    0    0.184024714708643575149100693471120664216774047979591417844635
 4    1    0.000000000000000000000000000000000000000000000000000000000000
 4    2    0.197966831227192369068141770510388793370637287463360401555746
 4    3   -0.0729547847313632629185146671595558023015011608914382961421311
 5    0    0.0879007340206681337319777094132125475918886824944548534041378
 5    1    0.000000000000000000000000000000000000000000000000000000000000
 5    2    0.000000000000000000000000000000000000000000000000000000000000
 5    3    0.410459702520260645318174895920453426088035325902848695210406
 5    4    0.482713753678866489204726942976896106809132737721421333413261
 6    0    0.0859700504902460302188480225945808401411132615636600222593880
 6    1    0.000000000000000000000000000000000000000000000000000000000000
 6    2    0.000000000000000000000000000000000000000000000000000000000000
 6    3    0.330885963040722183948884057658753173648240154838402033448632
 6    4    0.489662957309450192844507011135898201178015478433790097210790
 6    5   -0.0731856375070850736789057580558988816340355615025188195854775
 7    0    0.120930449125333720660378854927668953958938996999703678812621
 7    1    0.000000000000000000000000000000000000000000000000000000000000
 7    2    0.000000000000000000000000000000000000000000000000000000000000
 7    3    0.000000000000000000000000000000000000000000000000000000000000
 7    4    0.260124675758295622809007617838335174368108756484693361887839
 7    5    0.0325402621549091330158899334391231259332716675992700000776101
 7    6   -0.0595780211817361001560122202563305121444953672762930724538856
 8    0    0.110854379580391483508936171010218441909425780168656559807038
 8    1    0.000000000000000000000000000000000000000000000000000000000000
 8    2    0.000000000000000000000000000000000000000000000000000000000000
 8    3    0.000000000000000000000000000000000000000000000000000000000000
 8    4    0.000000000000000000000000000000000000000000000000000000000000
 8    5   -0.0605761488255005587620924953655516875526344415354339234619466
 8    6    0.321763705601778390100898799049878904081404368603077129251110
 8    7    0.510485725608063031577759012285123416744672137031752354067590
 9    0    0.112054414752879004829715002761802363003717611158172229329393
 9    1    0.000000000000000000000000000000000000000000000000000000000000
 9    2    0.000000000000000000000000000000000000000000000000000000000000
 9    3    0.000000000000000000000000000000000000000000000000000000000000
 9    4    0.000000000000000000000000000000000000000000000000000000000000
 9    5   -0.144942775902865915672349828340980777181668499748506838876185
 9    6   -0.333269719096256706589705211415746871709467423992115497968724
 9    7    0.499269229556880061353316843969978567860276816592673201240332
 9    8    0.509504608929686104236098690045386253986643232352989602185060
10    0    0.113976783964185986138004186736901163890724752541486831640341
10    1    0.000000000000000000000000000000000000000000000000000000000000
10    2    0.000000000000000000000000000000000000000000000000000000000000
10    3    0.000000000000000000000000000000000000000000000000000000000000
10    4    0.000000000000000000000000000000000000000000000000000000000000
10    5   -0.0768813364203356938586214289120895270821349023390922987406384
10    6    0.239527360324390649107711455271882373019741311201004119339563
10    7    0.397774662368094639047830462488952104564716416343454639902613
10    8    0.0107558956873607455550609147441477450257136782823280838547024
10    9   -0.327769124164018874147061087350233395378262992392394071906457
11    0    0.0798314528280196046351426864486400322758737630423413945356284
11    1    0.000000000000000000000000000000000000000000000000000000000000
11    2    0.000000000000000000000000000000000000000000000000000000000000
11    3    0.000000000000000000000000000000000000000000000000000000000000
11    4    0.000000000000000000000000000000000000000000000000000000000000
11    5   -0.0520329686800603076514949887612959068721311443881683526937298
11    6   -0.0576954146168548881732784355283433509066159287152968723021864
11    7    0.194781915712104164976306262147382871156142921354409364738090
11    8    0.145384923188325069727524825977071194859203467568236523866582
11    9   -0.0782942710351670777553986729725692447252077047239160551335016
11   10   -0.114503299361098912184303164290554670970133218405658122674674
12    0    0.985115610164857280120041500306517278413646677314195559520529
12    1    0.000000000000000000000000000000000000000000000000000000000000
12    2    0.000000000000000000000000000000000000000000000000000000000000
12    3    0.330885963040722183948884057658753173648240154838402033448632
12    4    0.489662957309450192844507011135898201178015478433790097210790
12    5   -1.37896486574843567582112720930751902353904327148559471526397
12    6   -0.861164195027635666673916999665534573351026060987427093314412
12    7    5.78428813637537220022999785486578436006872789689499172601856
12    8    3.28807761985103566890460615937314805477268252903342356581925
12    9   -2.38633905093136384013422325215527866148401465975954104585807
12   10   -3.25479342483643918654589367587788726747711504674780680269911
12   11   -2.16343541686422982353954211300054820889678036420109999154887
13    0    0.895080295771632891049613132336585138148156279241561345991710
13    1    0.000000000000000000000000000000000000000000000000000000000000
13    2    0.197966831227192369068141770510388793370637287463360401555746
13    3   -0.0729547847313632629185146671595558023015011608914382961421311
13    4    0.0000000000000000000000000000000000000000000000000000000000000
13    5   -0.851236239662007619739049371445966793289359722875702227166105
13    6    0.398320112318533301719718614174373643336480918103773904231856
13    7    3.63937263181035606029412920047090044132027387893977804176229
13    8    1.54822877039830322365301663075174564919981736348973496313065
13    9   -2.12221714704053716026062427460427261025318461146260124401561
13   10   -1.58350398545326172713384349625753212757269188934434237975291
13   11   -1.71561608285936264922031819751349098912615880827551992973034
13   12   -0.0244036405750127452135415444412216875465593598370910566069132
14    0   -0.915176561375291440520015019275342154318951387664369720564660
14    1    1.45453440217827322805250021715664459117622483736537873607016
14    2    0.000000000000000000000000000000000000000000000000000000000000
14    3    0.000000000000000000000000000000000000000000000000000000000000
14    4   -0.777333643644968233538931228575302137803351053629547286334469
14    5    0.000000000000000000000000000000000000000000000000000000000000
14    6   -0.0910895662155176069593203555807484200111889091770101799647985
14    7    0.000000000000000000000000000000000000000000000000000000000000
14    8    0.000000000000000000000000000000000000000000000000000000000000
14    9    0.000000000000000000000000000000000000000000000000000000000000
14   10    0.000000000000000000000000000000000000000000000000000000000000
14   11    0.000000000000000000000000000000000000000000000000000000000000
14   12    0.0910895662155176069593203555807484200111889091770101799647985
14   13    0.777333643644968233538931228575302137803351053629547286334469
15    0    0.100000000000000000000000000000000000000000000000000000000000
15    1    0.000000000000000000000000000000000000000000000000000000000000
15    2   -0.157178665799771163367058998273128921867183754126709419409654
15    3    0.000000000000000000000000000000000000000000000000000000000000
15    4    0.000000000000000000000000000000000000000000000000000000000000
15    5    0.000000000000000000000000000000000000000000000000000000000000
15    6    0.000000000000000000000000000000000000000000000000000000000000
15    7    0.000000000000000000000000000000000000000000000000000000000000
15    8    0.000000000000000000000000000000000000000000000000000000000000
15    9    0.000000000000000000000000000000000000000000000000000000000000
15   10    0.000000000000000000000000000000000000000000000000000000000000
15   11    0.000000000000000000000000000000000000000000000000000000000000
15   12    0.000000000000000000000000000000000000000000000000000000000000
15   13    0.000000000000000000000000000000000000000000000000000000000000
15   14    0.157178665799771163367058998273128921867183754126709419409654
16    0    0.181781300700095283888472062582262379650443831463199521664945
16    1    0.675000000000000000000000000000000000000000000000000000000000
16    2    0.342758159847189839942220553413850871742338734703958919937260
16    3    0.000000000000000000000000000000000000000000000000000000000000
16    4    0.259111214548322744512977076191767379267783684543182428778156
16    5   -0.358278966717952089048961276721979397739750634673268802484271
16    6   -1.04594895940883306095050068756409905131588123172378489286080
16    7    0.930327845415626983292300564432428777137601651182965794680397
16    8    1.77950959431708102446142106794824453926275743243327790536000
16    9    0.100000000000000000000000000000000000000000000000000000000000
16   10   -0.282547569539044081612477785222287276408489375976211189952877
16   11   -0.159327350119972549169261984373485859278031542127551931461821
16   12   -0.145515894647001510860991961081084111308650130578626404945571
16   13   -0.259111214548322744512977076191767379267783684543182428778156
16   14   -0.342758159847189839942220553413850871742338734703958919937260
16   15   -0.675000000000000000000000000000000000000000000000000000000000
    """

    s = len(b)
    A = np.zeros((s,s))

    temp = text.split('\n')
    for i in range(1,len(temp)-1):
        if temp[i]!='':
            temp2 = temp[i].split()
            if len(temp2)!=3:
                raise Exception('error in RK10 generation')
            k = int(temp2[0])
            j = int(temp2[1])
            value = float(temp2[2])
            A[k,j] = value

    return A,b,c

def RK4coeffs():
    c=np.array([0,1/2,1/2,1])
    b=np.array([1/6,1/3,1/3,1/6])
    A = np.array([
            [0,0,0,0],
            [1/2,0,0,0],
            [0,1/2,0,0],
            [0,0,1,0],
            ])
    return A,b,c

def LDIRK222():
    gamma = (2-2**0.5)/2
    delta = 1-1/(2*gamma)
    A = np.array([
                  [gamma, 0],
                  [1-gamma, gamma],
                  ])
    b = np.array([1-gamma, gamma])
    c=np.array([gamma, 1])
    #A,b,c = expandImplicitTableau(A,b,c)
    Ahat=np.array([[0,0,0],
                   [gamma, 0, 0],
                   [delta, 1-delta, 0],
                   ])
    bhat=np.array([delta, 1-delta, 0])
    chat=np.array([0, gamma, 1])
    return A,b,c,Ahat,bhat,chat

def FBeuler111():
    A = np.array([[1]])
    b = np.array([1])
    c=np.array([1])
    #A,b,c = expandImplicitTableau(A,b,c)

    Ahat=np.array([[0,0],
                   [1,0]])
    bhat=np.array([1,0])
    chat=np.array([0,1])
    return A,b,c,Ahat,bhat,chat

def DIRK121():
    A = np.array([[1]])
    b = np.array([1])
    c=np.array([1])
    #A,b,c = expandImplicitTableau(A,b,c)

    Ahat=np.array([[0,0],
                   [1,0]])
    bhat=np.array([0,1])
    chat=np.array([0,1])
    return A,b,c,Ahat,bhat,chat

def DIRK122():
    A = np.array([
                  [1/2],
                  ])
    b = np.array([1])
    c=np.array([1/2])
    #A,b,c = expandImplicitTableau(A,b,c)
    Ahat=np.array([[0,0],
                   [1/2, 0],
                   ])
    bhat=np.array([0, 1])
    chat=np.array([0, 1/2])
    return A,b,c,Ahat,bhat,chat

def LDIRK232():
    gamma = (2-2**0.5)/2
    delta = -2*(2**0.5)/3
    A = np.array([[gamma, 0],
                  [1-gamma, gamma]])
    b = np.array([1-gamma, gamma])
    c = np.array([gamma, 1])
    #A,b,c = expandImplicitTableau(A,b,c)

    Ahat=np.array([[0,0,0],
                   [gamma,0,0],
                   [delta, 1-delta, 0]])
    bhat=np.array([0, 1-gamma, gamma])
    chat=np.array([0, gamma, 1])
    return A,b,c,Ahat,bhat,chat

def DIRK233():
    gamma = (3+3**0.5)/6
    A = np.array([
                  [gamma, 0],
                  [1-2*gamma, gamma],
                  ])
    b = np.array([1/2, 1/2])
    c=np.array([gamma, 1-gamma])
    #A,b,c = expandImplicitTableau(A,b,c)
    Ahat=np.array([[0,0,0],
                   [gamma, 0, 0],
                   [gamma-1, 2*(1-gamma), 0],
                   ])
    bhat=np.array([0, 1/2, 1/2])
    chat=np.array([0, gamma, 1-gamma])
    return A,b,c,Ahat,bhat,chat

def LDIRK343():
    gamma = 0.4358665215
    A = np.array([
                  [gamma,                           0,                               0],
                  [(1-gamma)/2,                     gamma,                           0],
                  [-3/2*gamma**2 + 4*gamma - 1/4,    3/2*gamma**2 - 5*gamma + 5/4,   gamma ],
                  ])
    b = A[-1,:]
    c=np.array([gamma, (1+gamma)/2, 1])
    #A,b,c = expandImplicitTableau(A,b,c)
    Ahat=np.array([[0,0,0,0],
                   [0.4358665215, 0, 0, 0],
                   [0.3212788860, 0.3966543747, 0, 0],
                   [-0.105858296, 0.5529291479, 0.5529291479, 0],
                   ])
    bhat=np.array([0, 1.208496649, -0.644363171, 0.4358665215])
    chat=np.array([0, 0.4358665215, 0.7179332608, 1.])
    return A,b,c,Ahat,bhat,chat

def LDIRK443():
    A = np.array([
                  [1/2, 0, 0, 0],
                  [1/6, 1/2, 0, 0],
                  [-1/2, 1/2, 1/2, 0],
                  [3/2, -3/2, 1/2, 1/2],
                  ])
    b = A[-1,:]
    c=np.array([1/2, 2/3, 1/2, 1])
    #A,b,c = expandImplicitTableau(A,b,c)
    Ahat=np.array([[0,0,0,0, 0],
                   [1/2, 0, 0, 0, 0],
                   [11/18, 1/18, 0, 0, 0],
                   [5/6, -5/6, 1/2, 0, 0],
                   [1/4, 7/4, 3/4, -7/4, 0],
                   ])
    bhat=np.array([1/4, 7/4, 3/4, -7/4, 0])
    chat=np.array([0, 1/2, 2/3, 1/2, 1])
    return A,b,c,Ahat,bhat,chat

def rk4(tini, tend, nt, yini, fcn):

    dt = (tend-tini) / (nt-1)
    t = np.linspace(tini, tend, nt)

    yini_array = np.array(yini)
    neq = yini_array.size

    y = np.zeros((neq, nt), order='F')
    y[:,0] = yini_array

    for it, tn  in enumerate(t[:-1]):
        yn = y[:,it]
        k1 = fcn(tn, yn)
        k2 = fcn(tn + 0.5*dt, yn + dt*(0.5*k1))
        k3 = fcn(tn + 0.5*dt, yn + dt*(0.5*k2))
        k4 = fcn(tn + dt, yn + dt*k3)
        y[:,it+1] = yn + (dt/6)*(k1+2*k2+2*k3+k4)

    nfev = 4*(nt-1)

    return ode_result(y, t, nfev)

if __name__=='__main__':

    if 0:
        lbda = -0.2
        modelfun = lambda t,x: lbda*x
        yini = np.array([15., 15])
        out = heunEuler(fcn=modelfun, yini=yini, tspan=[0.,10.], tolerance=1e-6, dt_max=0.1)
        #out = rk4(tini=0., tend=10., nt=1000, yini=yini, fcn=modelfun)

        yth = np.zeros(np.shape(out.y))
        for i in range(np.size(yini)):
            yth[i,:] = yini[i]*np.exp(lbda*(out.t-out.t[0]))

        import matplotlib.pyplot as plt
        plt.figure()
        plt.plot(out.t, out.y[1,:], marker='+', label='num')
        plt.plot(out.t, yth[1,:], marker=None, label='th')
        plt.ylim([-10,30])
        plt.title('solution')

        plt.figure()
        plt.plot(np.diff(out.t), marker='+')
        plt.title('solution dt')
